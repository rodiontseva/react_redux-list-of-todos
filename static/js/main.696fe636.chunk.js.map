{"version":3,"sources":["store/loading.ts","api.ts","store/todos.ts","store/currentTodoId.ts","types/ComplitedFilter.tsx","store/index.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["LoadingActionsType","LOADING_ACTIONS_CREATOR","type","StartLoading","FinishLoading","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodosActionType","TodoActionsType","setTodosActionCreator","todos","SetTodos","payload","ComplitedFilter","TODO_ACTIONS_CREATOR","todoId","SetCurrentTodoId","TODOS_ACTIONS_CREATOR","dispatch","a","rootReducer","combineReducers","loading","action","currentTodoId","LOADING_SELECTORS","state","TODO_SELECTORS","TODOS_SELECTORS","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoList","props","filteredTodos","useDispatch","useSelector","className","map","todo","classNames","id","completed","title","onClick","TodoFilter","complitedFilter","setComplitedFilter","searchQuery","setSearchQuery","onSubmit","event","preventDefault","value","onChange","target","All","Active","Completed","placeholder","style","pointerEvents","Loader","TodoModal","selectedTodo","useState","selectedUser","setSelectedUser","isError","setIsError","useEffect","userId","catch","href","email","name","App","find","filteredTodosBySearchQuery","useMemo","filter","prepTitle","toLowerCase","prepSearchQuery","includes","errorNoTodosFromServer","length","errorNoSuchTodosBySearchQuery","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.696fe636.chunk.js","sourcesContent":["import { Action as BasicAction } from 'redux';\n\nexport type StartLoadingAction = BasicAction<LoadingActionsType.StartLoading>;\nexport type FinishLoadingAction = BasicAction<LoadingActionsType.FinishLoading>;\nexport type LoadingActions = StartLoadingAction | FinishLoadingAction;\n\nexport enum LoadingActionsType {\n  StartLoading = 'loading/start_loading',\n  FinishLoading = 'loading/finish_loading',\n}\n\nexport const startLoadingActionCreator = (): StartLoadingAction => ({\n  type: LoadingActionsType.StartLoading,\n});\nexport const finishLoadingActionCreator = (): FinishLoadingAction => ({\n  type: LoadingActionsType.FinishLoading,\n});\n\nexport const LOADING_ACTIONS_CREATOR = {\n  start: startLoadingActionCreator,\n  finish: finishLoadingActionCreator,\n};\n\nconst initialLoading = false;\n\nexport const loadingReducer = (\n  loading: boolean = initialLoading,\n  action: LoadingActions,\n): boolean => {\n  switch (action.type) {\n    case LoadingActionsType.StartLoading:\n      return true;\n    case LoadingActionsType.FinishLoading:\n      return false;\n    default:\n      return loading;\n  }\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { Dispatch } from 'redux';\nimport type { LoadTodos, Action } from '.';\nimport { getTodos } from '../api';\nimport { Todo } from '../types/Todo';\nimport { LOADING_ACTIONS_CREATOR } from './loading';\n\nexport enum TodosActionType {\n  SetTodos = 'todos/set_todos',\n}\n\nexport type SetTodosAction = Action<TodosActionType.SetTodos, Todo []>;\nexport type TodosActions = SetTodosAction;\nexport const setTodosActionCreator = (todos: Todo[]): SetTodosAction => ({\n  type: TodosActionType.SetTodos,\n  payload: todos,\n});\n\nexport const loadTodosAction = () => {\n  return async (dispatch: Dispatch<LoadTodos>) => {\n    dispatch(LOADING_ACTIONS_CREATOR.start());\n    const todos = await getTodos();\n\n    dispatch(setTodosActionCreator(todos));\n    dispatch(LOADING_ACTIONS_CREATOR.finish());\n  };\n};\n\nexport const todosReducer = (\n  todos: Todo[] = [],\n  action: TodosActions,\n): Todo[] => {\n  switch (action.type) {\n    case TodosActionType.SetTodos:\n      return [...action.payload];\n\n    default:\n      return todos;\n  }\n};\n","import type { Action } from '.';\n\nexport enum TodoActionsType {\n  SetCurrentTodoId = 'todo/set_current_todo',\n}\n\nexport type SetCurrentTodoIdAction = Action<\nTodoActionsType.SetCurrentTodoId, number | null>;\n\nexport type TodoActions = SetCurrentTodoIdAction;\n\nconst setCurrentTodoIdActionCreator = (\n  todoId: number | null,\n): SetCurrentTodoIdAction => ({\n  type: TodoActionsType.SetCurrentTodoId,\n  payload: todoId,\n});\n\nexport const TODO_ACTIONS_CREATOR = {\n  set: setCurrentTodoIdActionCreator,\n};\n\nconst initialCurrentTodoId = null;\n\nexport const currentTodoIdReducer = (\n  currentTodoId: number | null = initialCurrentTodoId,\n  action: TodoActions,\n) => {\n  switch (action.type) {\n    case TodoActionsType.SetCurrentTodoId:\n      return action.payload;\n\n    default:\n      return currentTodoId;\n  }\n};\n","export enum ComplitedFilter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import {\n  createStore, applyMiddleware, combineReducers, Action as BasicAction,\n} from 'redux';\nimport { composeWithDevTools } from '@redux-devtools/extension';\nimport thunk from 'redux-thunk';\nimport { Todo } from '../types/Todo';\n\nimport { LoadingActions, loadingReducer } from './loading';\nimport {\n  loadTodosAction, setTodosActionCreator, TodosActions, todosReducer,\n} from './todos';\nimport { currentTodoIdReducer } from './currentTodoId';\n\nexport interface Action<T, P> extends BasicAction<T> {\n  payload: P,\n}\n\nexport type LoadTodos = LoadingActions | TodosActions;\n\nexport const TODOS_ACTIONS_CREATOR = {\n  set: setTodosActionCreator,\n  loadTodos: loadTodosAction,\n};\n\nexport const rootReducer = combineReducers({\n  loading: loadingReducer,\n  currentTodoId: currentTodoIdReducer,\n  todos: todosReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst loadingSelector = (state: RootState): boolean => state.loading;\n\nexport const LOADING_SELECTORS = {\n  loading: loadingSelector,\n};\n\nconst currentTodoIdSelector = (\n  state: RootState,\n): number | null => state.currentTodoId;\n\nexport const TODO_SELECTORS = {\n  currentTodoId: currentTodoIdSelector,\n};\n\nconst todosSelector = (state: RootState): Todo[] => state.todos;\n\nexport const TODOS_SELECTORS = {\n  todos: todosSelector,\n};\n\nexport const store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TODO_SELECTORS } from '../../store';\nimport { TODO_ACTIONS_CREATOR } from '../../store/currentTodoId';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  filteredTodos: Todo[],\n}\n\nexport const TodoList: FC<Props> = (props) => {\n  const {\n    filteredTodos,\n  } = props;\n\n  const dispatch = useDispatch();\n  const currentTodoId = useSelector(TODO_SELECTORS.currentTodoId);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {filteredTodos.map(todo => (\n          <tr\n            key={todo.id}\n            data-cy=\"todo\"\n            className={classNames('', {\n              'has-background-info-light': todo.id === currentTodoId,\n            })}\n          >\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed\n              && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames(\n                { 'has-text-success': todo.completed },\n                { 'has-text-danger': !todo.completed },\n              )}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => dispatch(TODO_ACTIONS_CREATOR.set(todo.id))}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far', {\n                    'fa-eye': todo.id !== currentTodoId,\n                    'fa-eye-slash': todo.id === currentTodoId,\n                  })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC } from 'react';\nimport { ComplitedFilter } from '../../types/ComplitedFilter';\n\ninterface Props {\n  complitedFilter: ComplitedFilter,\n  setComplitedFilter: (complitedFilter: ComplitedFilter) => void,\n  searchQuery: string,\n  setSearchQuery: (query: string) => void,\n}\n\nexport const TodoFilter: FC<Props> = (props) => {\n  const {\n    complitedFilter,\n    setComplitedFilter,\n    searchQuery,\n    setSearchQuery,\n  } = props;\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={complitedFilter}\n            onChange={((event) => setComplitedFilter(\n              event.target.value as ComplitedFilter,\n            ))}\n          >\n            <option value={ComplitedFilter.All}>All</option>\n            <option value={ComplitedFilter.Active}>Active</option>\n            <option value={ComplitedFilter.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => {\n            setSearchQuery(event.target.value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                setSearchQuery('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getUser } from '../../api';\nimport { TODO_ACTIONS_CREATOR } from '../../store/currentTodoId';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ninterface Props {\n  selectedTodo: Todo,\n}\n\nexport const TodoModal: FC<Props> = (props) => {\n  const { selectedTodo } = props;\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsError(false);\n\n    getUser(selectedTodo.userId)\n      .then(setSelectedUser)\n      .catch(() => setIsError(true));\n  }, [selectedTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser\n        ? <Loader />\n        : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodo.id}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => {\n                  dispatch(TODO_ACTIONS_CREATOR.set(null));\n                }}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {selectedTodo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {selectedTodo.completed\n                  ? <strong className=\"has-text-success\">Done</strong>\n                  : <strong className=\"has-text-danger\">Planned</strong>}\n\n                {' by '}\n\n                {isError\n                  ? <div>User not found</div>\n                  : (\n                    <a href={`mailto:${selectedUser.email}`}>\n                      {selectedUser.name}\n                    </a>\n                  )}\n              </p>\n            </div>\n          </div>\n        )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  FC, useEffect, useMemo, useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { ComplitedFilter } from './types/ComplitedFilter';\nimport './App.scss';\nimport { Loader } from './components/Loader';\nimport {\n  LOADING_SELECTORS, TODO_SELECTORS, RootState, TODOS_SELECTORS, TODOS_ACTIONS_CREATOR,\n} from './store';\n\nexport const App: FC = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [complitedFilter, setComplitedFilter] = useState<ComplitedFilter>(ComplitedFilter.All);\n\n  const dispatch = useDispatch();\n  const loading = useSelector(LOADING_SELECTORS.loading);\n  const currentTodoId = useSelector(TODO_SELECTORS.currentTodoId);\n  const todos = useSelector(TODOS_SELECTORS.todos);\n\n  useEffect(() => {\n    dispatch(TODOS_ACTIONS_CREATOR.loadTodos());\n  }, []);\n\n  const selectedTodo = useSelector((state: RootState) => {\n    const newSelectedTodo = state.todos.find(todo => todo.id === currentTodoId) || null;\n\n    return newSelectedTodo;\n  });\n\n  const filteredTodosBySearchQuery = useMemo(() => (\n    todos.filter(todo => {\n      const prepTitle = todo.title.toLowerCase();\n      const prepSearchQuery = searchQuery.toLowerCase();\n\n      return prepTitle.includes(prepSearchQuery);\n    })), [todos]);\n\n  const filteredTodos = useMemo(() => {\n    return filteredTodosBySearchQuery.filter(todo => {\n      switch (complitedFilter) {\n        case ComplitedFilter.All:\n          return true;\n        case ComplitedFilter.Active:\n          return !todo.completed;\n        case ComplitedFilter.Completed:\n          return todo.completed;\n        default:\n          return true;\n      }\n    });\n  }, [complitedFilter, searchQuery, todos]);\n\n  const errorNoTodosFromServer = !loading && todos.length === 0 && !searchQuery;\n  const errorNoSuchTodosBySearchQuery = !loading && filteredTodos.length === 0 && searchQuery;\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                complitedFilter={complitedFilter}\n                setComplitedFilter={setComplitedFilter}\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading\n                ? <Loader />\n                : (\n                  <TodoList\n                    filteredTodos={filteredTodos}\n                  />\n                )}\n\n              {errorNoTodosFromServer && (\n                <h1>No results found</h1>\n              )}\n\n              {errorNoSuchTodosBySearchQuery && (\n                <h1>{`No results found for \"${searchQuery}\" and filtered by \"${complitedFilter}\"`}</h1>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodoId && selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n        />\n      )}\n\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { App } from './App';\nimport { store } from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}